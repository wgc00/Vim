
"============== 基本设置 =============={{{

set nocompatible
source $VIMRUNTIME/mswin.vim
behave mswin
runtime ftplugin/man.vim


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 窗体设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set winheight=50
" set winminheight=1
" set winwidth=150
" set winminwidth=1
" set guitablabel=%N\ %f
" set laststatus=0            		" 显示状态栏 (默认值为 1, 无法显示状态栏)
" set ruler							" 命令栏上方状态显示
" set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
" set statusline=%F\ \ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set title titlestring=%<%F\ \ \ \ \ %w%h%m%r%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-8.(%l,%c%V%)%P
set wildmenu                		" enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ 		" stuff to ignore when tab completing
"set wildmode=list:longest   		" make cmdline tab completion similar to bash


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 基本参数
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set nowrap     					" 自动折行
" set noswapfile
" set showmatch       				" 插入括号，先到匹配括号处跳一下
" set matchtime=8       				" 如果设置了showmatch，此处设置闪动时间
" set textwidth=880
" set expandtab          			" 把tab化为空格
" set number
" set nowrapscan						" 取消循环搜索
set hidden							" 可以不保存离开buff
set history=50
set scrolloff=3						" 设定光标离窗口上下边界 5 行时窗口自动滚动
set nolinebreak						" 折行
set nowritebackup
set smarttab            			" 行段开始处使用制表符
set tabstop=4    					" 设置tab为4个空格大小
set shiftwidth=4
set autoindent
set smartindent
set cindent
set autoread            			" 同步更新
set backup    						" 不备份
set winaltkeys=yes					" alt访问菜单项
set dir=$VIM\\bkfiles				" 设置swap文件的目录
set bdir=$VIM/bkfiles				" 设置备份文件的目录
set bsdir=buffer
set autochdir						" 自动切换当前目录为当前文件所在的目录
set cmdheight=1         			" 命令行高度
set showtabline=1       			" 显示tab选项卡
set clipboard+=unnamed 				" 与Windows共享粘贴板
set tabpagemax=20
set isk+=- 							"  none of these should be word dividers
set backspace=eol,start,indent  	"  allow backspacing over indent, eol, & start


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 搜索设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch    					" 高亮
set incsearch
set ignorecase smartcase 			" 搜索时自动区分大小写
set noerrorbells
set novisualbell
set t_vb=      						" close visual bell


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 打开文件高亮
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on
filetype plugin on
filetype indent on
syntax on
syntax enable


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 代码折叠设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set foldenable
" set foldmethod=marker
" set foldtext=MyOwnDamnFoldingFunction()
" set foldopen=hor,mark,search,tag,undo
set foldnestmax=3
" set foldexpr=getline(v:lnum)[0]==\"\\t\"
" set foldexpr=getline(v:lnum)=~'^\\s*$'&&getline(v:lnum+2)=~'\\S'?'<1':1
command! -nargs=? HiFold call HiFold(<args>)		" 调用命令:HiFold 实现折叠。


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 其他一些
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ','     			" 自定义<Leader>对应键
" set switchbuf=usetab      			" 在分割窗口中打开新buff文件
set lazyredraw    					" Do not update screen while executing macros
set display=lastline,uhex 			" Show the last line instead of '@'; show non-printable chars as <hex>
set whichwrap+=b,s,h,l,<,>,[,],~ 	" Wrap to the previous/next line on all keys and ~ command
set sidescroll=1  					" The minimal number of columns to scroll horizontally
set diffexpr=MyDiff()				" Diff规范


if has("autocmd")
	" autocmd!
	autocmd BufEnter * :syntax sync fromstart
	autocmd Filetype jsp call JavaSettings()
	autocmd Filetype jsp :set filetype=javascript
	autocmd Filetype jsp :set expandtab
	autocmd Filetype java call JavaSettings()
	autocmd FileType javascript call JavaScriptSettings()
endif


if has("multi_byte")
	set fileformat=unix
	set fileformats=unix,dos,mac	" 保存文件格式
    set formatoptions+=mM			" 处理自动排版如何折行的处理
	let &termencoding=&encoding
    set encoding=utf-8				" vim使用的内部编码
    set fileencoding=chinese		" 新建文件以此为编码
    set fileencodings=ucs-bom,utf-8,chinese,GB18030,big5,euc-jp,euc-kr,latin1

	if exists('&ambiwidth')
		set ambiwidth=double
	endif
    "if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
	"	" ambiwidth 默认值为 single。在其值为 single 时，
	"	" 若encoding为utf-8，gvim 显示全角符号时就会出问题，会当作半角显示。
    "    set ambiwidth=double
    "endif
endif


if has("gui_running")

	colorscheme autumn
	" colorscheme moria
    set guioptions-=m
    set guioptions-=T
    set cursorline
	set linespace=4

	" set guifont=Monaco:h10:cANSI
	" set guifont=Consolas:h10:cANSI
	set guifont=Courier_New:h9:cANSI
	" set guifont=Bitstream_Vera_Sans_Mono:h9:cANSI

	" set guifontwide=NSimSun:h9:cGB2312
    set guifontwide=YaHei_Consolas_Hybrid:h9

	""	黑体：SimHei 	宋体：SimSun 	新宋体：NSimSun 			仿宋：FangSong 	楷体：KaiTi
	""	仿宋_GB2312：FangSong_GB2312 	楷体_GB2312：KaiTi_GB2312 	微软雅黑体：Microsoft YaHei

	" GUI完全装载完成后，设定打开窗口的大小位置
	" autocmd GUIEnter * winpos 200 100
	" autocmd GUIEnter * winsize 2000 50

	" Omni menu colors
	hi Pmenu guibg=#333333
	hi PmenuSel guibg=#555555 guifg=#ffffff

	" 解决菜单乱码问题，先删除菜单，再重显示 :(
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8

endif

"}}}

"============== 插件参数 =============={{{


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => JAD settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
	augr class
		au!
		au bufreadpost,filereadpost *.class %!jad -noctor -ff -i -p %
		au bufreadpost,filereadpost *.class set readonly
		au bufreadpost,filereadpost *.class set ft=java
		au bufreadpost,filereadpost *.class normal gg=G
		au bufreadpost,filereadpost *.class set nomodified
		au bufreadpost,filereadpost *.class set nomodifiable
	augr end
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => genutils settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -nargs=1 -bang -complete=custom,<SID>PathComplete FindInPath
          \ :find<bang> <args>
function! s:PathComplete(ArgLead, CmdLine, CursorPos)
  return UserFileComplete(a:ArgLead, a:CmdLine, a:CursorPos, 1, &path)
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => XHTML settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let xml_use_xhtml = 1
let use_xhtml = 1
let html_use_css = 1
let html_number_lines = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ctags/Cscope settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags;	" 后面分号不可少，表示如果当前目录找不到，则搜索上一个文件夹
if has("cscope")
	set csprg=$VIM/cscope.exe
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	set csto=0
	set nocst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Taglist settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Inc_Winwidth = 0
let Tlist_Show_One_File = 1
" let Tlist_Show_Menu=1
" let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Exit_OnlyWindow = 1
" let Tlist_Use_SingleClick = 1
" let Tlist_Use_Right_Window = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => LaTex settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set shellslash
" set grepprg=grep\ -nH\ $*
" let g:tex_flavor='latex'
" let g:Tex_ViewRule_pdf='xpdf'
" let g:Tex_DefaultTargetFormat="pdf"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""" FuzzyFinder
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'Bookmark':{}, 'Tag':{}, 'TaggedFile':{}}
let g:FuzzyFinderOptions.Base.ignore_case = 1
let g:FuzzyFinderOptions.MruFile.max_item = 200
let g:FuzzyFinderOptions.MruCmd.max_item = 200
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"}}}

"============== 函数列表 =============={{{

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""带行号复制""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! YankWithLineNumber() range
	let a = ""
	let i = a:firstline
	while i <= a:lastline
		let a = a . i . "    " . getline(i) . "\n"
		let i = i + 1
	endwhile
	call setreg('*', a, "l")
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""V-Search""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! VisualSearch(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"
	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")
	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	else
		execute "normal /" . l:pattern . "^M"
	endif
	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => javaSetting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! JavaSettings()
    " call JavaFold()
	" set completeopt=longest,menu
	set tabstop=2
	set makeprg=javac
	set errorformat=%f:%l:%c:%*\d:%*\d:%*\s%m
	setlocal omnifunc=javacomplete#Complete
	setlocal completefunc=javacomplete#CompleteParamsInfo
endfunction
function! JavaFold()
	setl foldmethod=syntax
  	setl foldlevelstart=1
  	syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend
  	syn match foldImports /\(\n\?import.\+;\n\)\+/ transparent fold
  	function! FoldText()
  		return substitute(getline(v:foldstart), '{.*', '{...}', '')
  	endfunction
  	setl foldtext=FoldText()
  	setl nofen
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => javaScriptSetting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! JavaScriptSettings()
	setl fen
	setl nocindent
	setl expandtab
	setl tabstop=2
	setl shiftwidth=2
    " call JavaScriptFold()
	setlocal omnifunc=javascriptcomplete#CompleteJS
endfunction
function! JavaScriptFold()
	setl foldmethod=syntax
	setl foldlevelstart=1
	syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend
	function! FoldText()
		return substitute(getline(v:foldstart), '{.*', '{...}', '')
	endfunction
	setl foldtext=FoldText()
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => My FuzzyFinder
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MyFuzzyFinder()
	let choice = inputlist(
		\ ['### FuzzyMenu ###',
		\ '>>> 1. 新建书签',
		\ '>>> 2. 打开书签',
		\ '>>> 3. 最新编辑',
		\ '>>> 4. 命令记录',
		\ '>>> 5. 清除缓存']
		\ )
	if choice == 1
		:FuzzyFinderAddBookmark
	elseif choice == 2
		:FuzzyFinderBookmark
	elseif choice == 3
		:FuzzyFinderMruFile
	elseif choice == 4
		:FuzzyFinderMruCmd
	elseif choice == 5
		:FuzzyFinderRemoveCache
	endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 代码折叠行样式
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MyOwnDamnFoldingFunction()
	let astra = '>>' . v:folddashes . '> ' " Aww yeah -- make a nice arrow
	let lines = (v:foldend - v:foldstart + 1) . ' lines: ' " Number of lines
	let raw = getline(v:foldstart) " The 'raw' fold text
	" Kill initial whitespace in 'raw', just in case; assign to 'label'. 'label'
	" is the name distilled from 'raw'
	let label = substitute(raw, '^\s\+', '', '')
	" Drag a string consisting of letters, white space, and hyphens out of
	" label; assign to label
	let label = matchstr(label, '\(\a\|\s\|-\)\+')
	" Kill any initial whitespace in *that* as well
	let label = substitute(label, '^\s\+', '', '')
	return astra . lines . label
endfunction

" => 另一个代码折叠
function! HiFold(...)
	if a:0==0
		let g:HiStr='\t'
	else
		let g:HiStr=a:1
	endif
	let g:hiLen=strlen(substitute(g:HiStr, ".", "x", "g"))
	highlight Folded term=bold cterm=bold gui=bold
	highlight Folded guibg=NONE guifg=DarkBlue
	set fcs="fold:"
	set foldmethod=expr
	set foldexpr=HiFoldExpr(v:lnum)
	set foldtext=HiFoldText()
endfunction
function! HiFoldExpr(lnum)
	if getline(a:lnum)!~'\S'
		return "="
	endif
	let si=getline(prevnonblank(a:lnum))
	let sj=getline(nextnonblank(a:lnum+1))
	let i=HiGetHi(si)
	let j=HiGetHi(sj)
	if j==i
		return "="
	elseif j>i
		return ">" . i
	else
		return "<" . j
	endif
endfunction
function! HiGetHi(sline)
	let c=1
	while 1
		let shead='^\(' . g:HiStr . '\)\{' . string(c) . '}'
		if a:sline=~shead
			let c+=1
			continue
		endif
		break
	endwhile
	return (c)
endfunction
function! HiFoldText()
	let sLine=getline(v:foldstart)
	let tab2space=repeat(nr2char(32),&ts)
	let sLine=substitute(sLine,"\t",tab2space,"g")
	let a=(sLine=~"^" . nr2char(32))?".":"^"
	let sLine=substitute(sLine,a,"=>","")
	return sLine
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MyDiff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MyDiff()
	let opt = '-a --binary '
	if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
	if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
	let arg1 = v:fname_in
	if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
	let arg2 = v:fname_new
	if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
	let arg3 = v:fname_out
	if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
	let eq = ''
	if $VIMRUNTIME =~ ' '
		if &sh =~ '\<cmd'
			let cmd = '""' . $VIMRUNTIME . '\diff"'
			let eq = '"'
		else
			let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
		endif
	else
		let cmd = $VIMRUNTIME . '\diff'
	endif
	silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Others Unused
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc

func! Cwd()
	let cwd = getcwd()
	return "e " . cwd
endfunc

func! CurrentFileDir(cmd)
	return a:cmd . " " . expand("%:p:h") . "/"
endfunc

function! SmartTOHtml()
	TOhtml
	try
		%s/&quot;\s\+\*&gt; \(.\+\)</" <a href="#\1" style="color: cyan">\1<\/a></g
		%s/&quot;\(-\|\s\)\+\*&gt; \(.\+\)</" \&nbsp;\&nbsp; <a href="#\2" style="color: cyan;">\2<\/a></g
		%s/&quot;\s\+=&gt; \(.\+\)</" <a name="\1" style="color: #fff">\1<\/a></g
	catch
	endtry
	exe ":write!"
	exe ":bd"
endfunction

function! SwitchToBuf(filename)
	" let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
	" find in current tab
	let bufwinnr = bufwinnr(a:filename)
	if bufwinnr != -1
		exec bufwinnr . "wincmd w"
		return
	else
		" find in each tab
		tabfirst
		let tab = 1
		while tab <= tabpagenr("$")
			let bufwinnr = bufwinnr(a:filename)
			if bufwinnr != -1
				exec "normal " . tab . "gt"
				exec bufwinnr . "wincmd w"
				return
			endif
			tabnext
			let tab = tab + 1
		endwhile
		" not exist, new tab
		exec "tabnew " . a:filename
	endif
endfunction

"}}}

"============== 按键映射 =============={{{



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Function Map
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 带行号复制
vnoremap \y :call YankWithLineNumber()<CR>
" 选取搜索
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
" 用空格键来开关折叠
noremap <silent> <space> @=(foldclosed(line('.')) < 0) ? 'zc' : 'zo' <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fuzzy Finder
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <C-x><C-d> :FuzzyFinderDir<CR>
nnoremap <silent> <C-x><C-x> :call MyFuzzyFinder()<CR>
nnoremap <silent> <C-x><C-]> :FuzzyFinderTag!<C-r>=expand('<cword>')<CR><CR>
nnoremap <silent> <C-x><C-f> :FuzzyFinderFile <C-r>=substitute(fnamemodify(getcwd(), ':p'),'\\','/','g')<CR><CR>
nnoremap <silent> <C-x><C-g> :FuzzyFinderFile <C-R>=expand('%:~:.')[:-1-len(expand('%:~:.:t'))]<CR><CR>
nnoremap <silent> <C-x><C-b> :FuzzyFinderBuffer<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 自动补全括号
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" inoremap [ []<LEFT>
" inoremap ( ()<LEFT>
" inoremap { {}<LEFT>
" inoremap ] ]<LEFT>
" inoremap ) )<LEFT>
" inoremap } }<LEFT>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 环绕括号等
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap g) <esc>`>a)<esc>`<i(<esc>
vnoremap g] <esc>`>a]<esc>`<i[<esc>
vnoremap g} <esc>`>a}<esc>`<i{<esc>
vnoremap g" <esc>`>a"<esc>`<i"<esc>
vnoremap g' <esc>`>a'<esc>`<i'<esc>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Emacs Style
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cmap <C-b> <Left>
cmap <C-f> <Right>
cnoremap <M-f> <S-Right>
cnoremap <M-b> <S-Left>
cmap <C-a> <Home>
cmap <C-e> <End>
cmap <M-p> <Up>
cmap <M-n> <Down>
cmap <C-d> <Del>
cnoremap <C-y> <C-r><C-o>"
cnoremap <M-w> <C-y>
cnoremap <M-BS> <C-w>
cnoremap <C-k> <C-f>d$<C-c><End>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 操作.vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("unix")
	noremap <F12> :edit ~/.vimrc<cr>
	noremap <C-F12> :source ~/.vimrc<CR>
else
	noremap <F12> :edit $VIM/.vimrc<cr>
	noremap <C-F12> :source $VIM/.vimrc<CR>
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 上下移动行
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-DOWN> mz:m+<cr>`z
nmap <C-UP> mz:m-2<cr>`z
vmap <C-DOWN> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-UP> :m'<-2<cr>`>my`<mzgv`yo`z
nmap <C-M-DOWN> yyp
nmap <C-M-UP> yyjp


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => All the Others
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-J> gj
map <C-K> gk
map <C-H> h
map <C-L> l
map <C-A> 0
map <C-E> $
map <M-m> :BufExplorer<CR>
noremap <M-n> :cn<CR>
noremap <M-p> :cp<CR>
noremap <M-Space> <C-W>\|<C-W>_
nnoremap <M-l> zz<C-l>

map <F1> :update<CR>:q<CR>
map <F2> :update<CR>
map <F4> :setl spell!<Bar>setl spell?<CR>
noremap <F5> zz<C-L>
map <F6> :Tlist<CR>
map <F7> :if exists("syntax_on") <Bar> syntax off <Bar> else <Bar> syntax enable <Bar> endif <CR>
map <F8> :set hls!<BAR>set hls?<CR>
map <F9> :call Calendar()<CR>
map <F10> :read !date<CR>
map <F11> :%!xxd<CR>
map <C-F8> :new<CR>:read !svn diff<CR>:set syntax=diff buftype=nofile<CR>gg
map <C-F9> ggVGg?

nnoremap <silent> <c-x>d :browse e<CR>      		" 打开文件
nnoremap <silent> ,n :browse e<CR>      			" 打开文件
map ,<space> :Utl<CR>								" Utl 插件
nnoremap ,c :setlocal fileencoding=chinese<CR>		" 切换编码
nnoremap ,u :setlocal fileencoding=utf-8<CR>		" 切换编码
map ,f :update<CR>:silent !start c://progra~1//intern~1//iexplore.exe file://%:p<CR>


"}}}


" vim:set foldmethod=marker:
